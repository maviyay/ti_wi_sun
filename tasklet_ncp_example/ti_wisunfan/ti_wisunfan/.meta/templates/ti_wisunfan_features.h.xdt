%%{
/*
 * Copyright (c) 2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ti_wisunfan_features.h.xdt ========
 */

const inst = system.modules["/ti/ti_wisunfan/ti_wisunfan"].$static;

function getModeFeatureMacro(mode) {
    switch(mode) {
        case "beacon":
            return "FEATURE_BEACON_MODE";
        case "nonBeacon":
            return "FEATURE_NON_BEACON_MODE";
        case "frequencyHopping":
            return "FEATURE_FREQ_HOP_MODE";
        case "fixedChannel":
            return "FEATURE_FREQ_HOP_MODE";
        default:
            throw new Error("Unhanded mode: " + mode);
    }
}

function convertPresharedKeyToArray(keyStr) {
    var arrayStr = "";

    arrayStr += "{";

    for (let i = 0; i < 16; i++) {
       arrayStr += "0x" + keyStr.substring(i*2, (i+1)*2) + ", ";
    }
    
    arrayStr = arrayStr.slice(0,-2);
    arrayStr += "}";
    return arrayStr;
}
%%}

/******************************************************************************
 DO NOT EDIT - This file is generated by the SysConfig tool.
 @file ti_154stack_features.h

 @brief TI-15.4 Stack feature parameters definitions for `inst.project` applications

 *****************************************************************************/
#ifndef TI_154STACK_FEATURES_H
#define TI_154STACK_FEATURES_H

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include "6LoWPAN/ws/ws_config.h"

%if(inst.secureLevel === "macSecureDisabled") {
#define NETWORK_AUTH_TYPE NO_AUTH
%}
%else if(inst.secureLevel === "macSecurePresharedKey") {
#define FEATURE_MAC_SECURITY
%   if(inst.euiJoin === false) {
#define NETWORK_AUTH_TYPE PRESHARED_KEY_AUTH
%   } else {
#define NETWORK_AUTH_TYPE CUSTOM_EUI_AUTH
%   }
%} else {
#define FEATURE_MAC_SECURITY
#define NETWORK_AUTH_TYPE DEFAULT_MBEDTLS_AUTH
%}

#define FIXED_GTK_KEY_1 `convertPresharedKeyToArray(inst.keyTableDefaultKey1)`
#define FIXED_GTK_KEY_2 `convertPresharedKeyToArray(inst.keyTableDefaultKey2)`
#define FIXED_GTK_KEY_3 `convertPresharedKeyToArray(inst.keyTableDefaultKey3)`
#define FIXED_GTK_KEY_4 `convertPresharedKeyToArray(inst.keyTableDefaultKey4)`

/* Builds the image with `inst.mode` mode of operation */
#define `getModeFeatureMacro(inst.mode)`

% if(inst.project.includes("borderrouter")) {
/*! Builds the image with the full function device */
#define FEATURE_FULL_FUNCTION_DEVICE
% }

#define FEATURE_RAPID_JOIN_ENABLE (`inst.rapidJoin ? "true" : "false"`)
#define FEATURE_MPL_LOW_LATENCY_ENABLE (`inst.mplLowLatency ? "true" : "false"`)
#define FEATURE_RAPID_DISCONNECT_DETECT_BR_SEC (`inst.rapidDisconnectDetectBr`)
#define FEATURE_RAPID_DISCONNECT_DETECT_RN_SEC (`inst.rapidDisconnectDetectRn`)

#ifdef __cplusplus
}

#endif

#endif /* TI_154STACK_FEATURES_H */
